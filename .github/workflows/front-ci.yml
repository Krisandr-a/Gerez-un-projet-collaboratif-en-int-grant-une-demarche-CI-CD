# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Frontend CI

on:
  workflow_dispatch: {}   # run only when triggered manually

jobs:
  frontend-ci:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: front

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      - name: Install dependencies
        run: npm ci

      # Add the JUnit reporter (not in your package.json)
      - name: Add karma-junit-reporter (CI-only)
        run: npm i -D karma-junit-reporter

      # Install Chrome for Karma's ChromeHeadless
      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v1

      # Build
      - name: Build
        run: npm run build --if-present

      - name: Generate karma-ci.conf.js
        run: |
          cat > karma-ci.conf.js <<'EOF'
          const base = require('./karma.conf.js');
          module.exports = function (config) {
            // load project's base config
            base(config);
      
            // ensure junit plugin is available even if plugins array is set
            const plugins = config.plugins || [];
            try { plugins.push(require('karma-junit-reporter')); } catch (e) {}
            config.plugins = plugins;
      
            // reporters
            const reporters = new Set([...(config.reporters || []), 'junit', 'coverage', 'progress']);
            config.reporters = Array.from(reporters);
      
            // custom launcher with no-sandbox flags (required on GitHub runners)
            config.customLaunchers = Object.assign({}, config.customLaunchers, {
              ChromeHeadlessNoSandbox: {
                base: 'ChromeHeadless',
                flags: [
                  '--no-sandbox',
                  '--disable-setuid-sandbox',
                  '--disable-dev-shm-usage',
                  '--disable-gpu'
                ]
              }
            });
      
            // use the custom launcher in CI
            config.browsers = ['ChromeHeadlessNoSandbox'];
      
            // junit output location
            config.junitReporter = {
              outputDir: 'test-results/junit',
              outputFile: 'results.xml',
              useBrowserName: false
            };
          };
          EOF

      - name: Test (Karma) with coverage
        env:
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
        run: |
          npx ng test \
            --no-watch \
            --code-coverage \
            --karma-config=karma-ci.conf.js
        continue-on-error: true

      - name: Test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Frontend Tests
          path: front/test-results/junit/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/**
          if-no-files-found: warn

      - name: Upload build dist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: front/dist/**
          if-no-files-found: warn

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: front
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bobapp-front:latest
